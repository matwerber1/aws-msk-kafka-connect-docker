AWSTemplateFormatVersion: '2010-09-09'
Description: 'MSK cluster launched into a new private VPC w/ a Cloud9 instance for testing'

Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255

Resources:

  #-----------------------------------------------------------
  # MSK COMPONENTS
  #-----------------------------------------------------------
  MskCluster: 
    Type: AWS::MSK::Cluster
    Properties: 
      BrokerNodeGroupInfo: 
        ClientSubnets: 
          - !Ref SubnetAPrivate
          - !Ref SubnetBPrivate
          - !Ref SubnetCPrivate
        InstanceType: 
          kafka.t3.small                                  # at time of writing, this is smallest possible broker type
        SecurityGroups: 
          - !Ref MskSecurityGroup
      ClusterName: !Sub "${AWS::StackName}-MskCluster"
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS_PLAINTEXT                     # This allows TLS or plaintext; plaintext may not be suitable for sensitive content
      KafkaVersion: '2.2.1'
      NumberOfBrokerNodes: 3

  MskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Security group for MSK demo cluster'
      SecurityGroupEgress: 
        - CidrIp: 0.0.0.0/0
          Description: 'Allow All Outbound'
          # "-1" allows all ports/traffic
          FromPort: -1      
          ToPort: -1
          IpProtocol: -1
      Tags: 
        - Key: Name
          Value: 'MSK Demo - Cluster  SG'
      VpcId: !Ref VPC

  MskSecurityGroupIngressSelfReferencing:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'self-referencing rule'
      GroupId:
        !Ref MskSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId:
        !Ref MskSecurityGroup

  # Since we can't customize / specify a security group for Cloud9 in CloudFormation, 
  # we instead open our MSK cluster's security group to accept all private traffic from
  # within our VPC so that our Cloud9 instance can communicate with the cluster when
  # we later execute our demo: 
  MskSecurityGroupIngressAllVpcTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: 'allow all inbound private VPC traffic'
      GroupId:
        !Ref MskSecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      CidrIp: !GetAtt VPC.CidrBlock
  
  #-----------------------------------------------------------
  # S3 Bucket
  #-----------------------------------------------------------
  
  # We will write data from our MSK cluster to this demo bucket using Kafka Connect:
  S3Bucket:
    Type: AWS::S3::Bucket

  #-----------------------------------------------------------
  # NETWORKING COMPONENTS
  #-----------------------------------------------------------

  # Cloud9 Instance to interact with our MSK cluster: 
  Cloud9Instance:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      AutomaticStopTimeMinutes: 30
      Description: 'Cloud9 instance to interact with demo MSK cluster and test Kafka Connect'
      InstanceType: 'm5.xlarge'   # I found that the super-small instance types did not provide enough memory for JVM to run our Docker / Kafka Connnect containers
      Name: 'MSK-Demo'
      SubnetId: !Ref SubnetAPublic
      Tags: 
        - Key: Usage
          Value: 'Cloud9 for MSK Demo'
  
  #-----------------------------------------------------------
  # NETWORKING COMPONENTS
  #-----------------------------------------------------------
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  
  VPCCidrBlock:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  SubnetAPublic:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      #AssignIpv6AddressOnCreation: true # TODO can not be set if MapPublicIpOnLaunch is true as well
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      Ipv6CidrBlock: !Select [0, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A public'
      - Key: Reach
        Value: public

  SubnetAPrivate:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'A private'
      - Key: Reach
        Value: private

  # For redundancy, we would normally have a NAT GW in each AZ, but for this demo
  # we will only use one and point both private route tables at it to reduce cost:
  NatGatewayElasticIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags: 
        - Key: Name
          Value: Public A NAT GW IP
  
  NatGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayElasticIP.AllocationId
      SubnetId: !Ref SubnetAPublic
      Tags:
      - Key: Name
        Value: !Sub 'Subnet A NAT Gateway'

  SubnetBPublic:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B public'
      - Key: Reach
        Value: public

  SubnetBPrivate:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B private'
      - Key: Reach
        Value: private

  SubnetBPublic:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B public'
      - Key: Reach
        Value: public

  SubnetBPrivate:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B private'
      - Key: Reach
        Value: private
  
  SubnetCPublic:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.64.0/20'
      Ipv6CidrBlock: !Select [4, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C public'
      - Key: Reach
        Value: public

  SubnetCPrivate:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.80.0/20'
      Ipv6CidrBlock: !Select [5, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 6, 64]]
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C private'
      - Key: Reach
        Value: private
        
  RouteTableAPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  RouteTableAPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private

  RouteTableBPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B Public'

  RouteTableBPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'B Private'

  RouteTableCPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C Public'

  RouteTableCPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'C Private'

  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTableAPublic

  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate

  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTableBPublic

  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate

  RouteTableAssociationCPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      RouteTableId: !Ref RouteTableCPublic

  RouteTableAssociationCPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      RouteTableId: !Ref RouteTableCPrivate

  RouteTablePrivateAInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGatewayA
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA

  RouteTablePrivateBInternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA        # In prod, we'd have a NAT GW for each AZ, but for demo we share NAT to control cost

  RouteTablePrivateCInternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableCPrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA        # In prod, we'd have a NAT GW for each AZ, but for demo we share NAT to control cost
      
  RouteTablePublicAInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      
  RouteTablePublicBInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  RouteTablePublicCInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableCPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private

  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationCPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationCPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      NetworkAclId: !Ref NetworkAclPrivate
      
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      
  NetworkAclEntryInPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      
  NetworkAclEntryOutPrivateAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  
  StackRegion:
    Description: 'Region that this stack is launched in'
    Value: !Sub '${AWS::Region}'

  MskClusterArn:
    Description: 'ARN of the MSK cluster'
    Value: !Ref MskCluster

  BucketName: 
    Description: 'S3 Bucket that we will MSK topic messages to using Kafka Connect'
    Value: !Ref S3Bucket

  AZs:
    Description: 'AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'

  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'

  AZC:
    Description: 'AZ of C'
    Value: !Select [2, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZC'

  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'

  VPC:
    Description: 'VPC.'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Description: 'InternetGateway.'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'

  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic, !Ref SubnetCPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'

  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate, !Ref SubnetCPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'

  RouteTablesPrivate:
    Description: 'Route tables private.'
    Value: !Join [',', [!Ref RouteTableAPrivate, !Ref RouteTableBPrivate, !Ref RouteTableCPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate'
  RouteTablesPublic:
    Description: 'Route tables public.'
    Value: !Join [',', [!Ref RouteTableAPublic, !Ref RouteTableBPublic, !Ref RouteTableCPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  
  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
  
  RouteTableAPublic:
    Description: 'Route table A public.'
    Value: !Ref RouteTableAPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPublic'
  
  SubnetAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'
  
  RouteTableAPrivate:
    Description: 'Route table A private.'
    Value: !Ref RouteTableAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableAPrivate'
  
  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  
  RouteTableBPublic:
    Description: 'Route table B public.'
    Value: !Ref RouteTableBPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPublic'
  
  SubnetBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'
  
  RouteTableBPrivate:
    Description: 'Route table B private.'
    Value: !Ref RouteTableBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableBPrivate'
  
  SubnetCPublic:
    Description: 'Subnet C public.'
    Value: !Ref SubnetCPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPublic'

  RouteTableCPublic:
    Description: 'Route table C public.'
    Value: !Ref RouteTableCPublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableCPublic'

  SubnetCPrivate:
    Description: 'Subnet C private.'
    Value: !Ref SubnetCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetCPrivate'

  RouteTableCPrivate:
    Description: 'Route table C private.'
    Value: !Ref RouteTableCPrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableCPrivate'